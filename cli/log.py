# -*- coding: utf-8 -*-
import glob
import os
import time
try:
    import cli
    from lib import color, human_readable_size, say
except ImportError as e:
    raise e


today = "%4d%02d%02d" % time.localtime()[:3]
logpath = os.path.join(os.environ.get('HOME'), today)
if not os.path.isdir(logpath):
    os.makedirs(logpath)


class complete(list):
    def view():
        """Returns a dict of file name, used for auto completion"""
        files = sorted(glob.glob(logpath + "/*"))
        files_list = []
        for f in files:
            files_list.append(os.path.basename(f))
        return files_list


class do_log(list):
    def __init__(self, rawcmd):
        cmd_list = rawcmd.split()
        self.cmd_list = cmd_list
        self.rawcmd = rawcmd
        if len(cmd_list) < 2:  # We have only 2 levels by now.
            say.available_cmds(cli.log_l2)
            return
        try:
            l2cmd = self.cmd_list[1]
        except IndexError:
            return
        # Start execution
        try:
            func = getattr(self, 'do_' + l2cmd)
            func()
        except AttributeError:
            say.available_cmds(cli.log_l2)
            return

    def do_list(self):
        """eg: log list
        """
        files = sorted(glob.glob(logpath + "/*"))
        if files:
            print("Log files in %s:" % str(logpath))
            print("%s Size  -  Date  - Time - User - CMD - Host%s" %
                  (color.WHITE, color.OFF))
            for f in files:
                print("%s\t%s" % (human_readable_size(os.path.getsize(f)),
                                  str(os.path.basename(f))))
        else:
            print("You don't have any log file.")

    def do_view(self):
        """View logged screen file.
        eg: log view 20130705-110150-mj-telnet-10.0.0.1
        """
        # TODO: rewrite with pure python. Try to strip Control Code
        # generated by TUI, or record time info and rewind them.
        try:
            f = self.cmd_list[2]
        except Exception:
            print("Need file name listed by \"log list\".")
            return
        f = os.path.join(logpath, f)
        if os.path.isfile(f):
            os.system("less -r %s" % f)
        else:
            say.nofile(f, prefix="log view")
            return False


def get_log_file(suffix):
    """Determine screen logging file name.
    It's really long, so split out."""
    day_and_time = "%4d%02d%02d-%02d%02d%02d" % time.localtime()[:-3]
    username = os.getlogin()
    filename = '-'.join([day_and_time, username, suffix])
    f = os.path.join(logpath, filename)
    return f
